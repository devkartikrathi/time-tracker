// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categories Category[]
  tasks      Task[]
  goals      Goal[]

  @@map("users")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategories Subcategory[]
  tasks         Task[]
  Goal          Goal[]

  @@map("categories")
}

model Subcategory {
  id         String   @id @default(cuid())
  name       String
  color      String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tasks    Task[]
  Goal     Goal[]

  @@map("subcategories")
}

model Task {
  id            String   @id @default(cuid())
  date          String // YYYY-MM-DD format
  hour          Int // 0-23
  taskName      String
  duration      Int      @default(1) // in hours
  wellBeingTags String[] // Array of well-being tags
  userId        String
  categoryId    String
  subcategoryId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@unique([userId, date, hour])
  @@map("tasks")
}

model Goal {
  id            String   @id @default(cuid())
  name          String
  targetHours   Int
  categoryId    String
  subcategoryId String?
  userId        String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  @@map("goals")
}
