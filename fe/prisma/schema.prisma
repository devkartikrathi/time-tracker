// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CategoryType {
  REST
  WORK
  OTHER
}

model User {
  id         String   @id @default(cuid())
  clerkId    String   @unique
  email      String   @unique
  firstName  String?
  lastName   String?
  occupation String?
  age        Int?
  focus      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  subcategories Subcategory[]
  tasks         Task[]
  goals         Goal[]

  @@map("users")
}

model Subcategory {
  id        String       @id @default(cuid())
  name      String
  color     String
  category  CategoryType // REST, WORK, or OTHER
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]
  goals Goal[]

  @@map("subcategories")
}

model Task {
  id            String       @id @default(cuid())
  date          String // YYYY-MM-DD format
  hour          Int // 0-23
  taskName      String
  duration      Int          @default(1) // in hours
  wellBeingTags String[] // Array of well-being tags
  userId        String
  category      CategoryType // REST, WORK, or OTHER
  subcategoryId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory Subcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  @@unique([userId, date, hour])
  @@map("tasks")
}

model Goal {
  id            String       @id @default(cuid())
  name          String
  targetHours   Int
  category      CategoryType // REST, WORK, or OTHER
  subcategoryId String // Required - goals must be for specific subcategories
  userId        String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@map("goals")
}
